/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 computer.glb 
*/

import React, { useRef } from "react";
import { Canvas, useFrame } from "@react-three/fiber";
import { useGLTF } from '@react-three/drei'

export function Computer(props) {
  const { nodes, materials } = useGLTF('/computer.glb')
  const modelRef = useRef();

  useFrame(() => {
    if (modelRef.current) {
      console.log("Model Ref:", modelRef.current);  // Debugging to check if the ref is attached
      modelRef.current.rotation.y += 0.01; // Simple rotation logic
    }
  });
  return (
    <group {...props} dispose={null} ref={modelRef} scale={45}>
      <mesh geometry={nodes.screen_text.geometry} material={materials.M_screen_brightgreen} />
      <mesh geometry={nodes.monitor_basefoot.geometry} material={materials.M_plastic_cream} />
      <mesh geometry={nodes.mouse.geometry} material={materials.M_plastic_cream} />
      <mesh geometry={nodes.monitor_1.geometry} material={materials.M_plastic_cream} />
      <mesh geometry={nodes.monitor_2.geometry} material={materials.M_lam_black} />
      <mesh geometry={nodes.keyboard_1.geometry} material={materials.M_plastic_cream} />
      <mesh geometry={nodes.keyboard_2.geometry} material={materials.M_plastic_bone_shad} />
      <mesh geometry={nodes.tower_1.geometry} material={materials.M_plastic_bone_shad} />
      <mesh geometry={nodes.tower_2.geometry} material={materials.M_lam_darkgrey} />
      <mesh geometry={nodes.tower_3.geometry} material={materials.M_plastic_bone} />
      <mesh geometry={nodes.speaker_dupe_1.geometry} material={materials.M_plastic_bone_shad} />
      <mesh geometry={nodes.speaker_dupe_2.geometry} material={materials.M_lam_darkgrey} />
      <mesh geometry={nodes.speaker_1.geometry} material={materials.M_plastic_bone_shad} />
      <mesh geometry={nodes.speaker_2.geometry} material={materials.M_lam_darkgrey} />
    </group>
  )
}

useGLTF.preload('/computer.glb')
